drop function if exists "public"."get_available_selfies"(p_uuid uuid);

drop function if exists "public"."get_selfie_for_user_avatar"(p_uuid uuid);

drop function if exists "public"."get_user_avatar_by_uuid"(user_uuid uuid);

alter table "public"."user_avatars" alter column "created_at" set default now();

alter table "public"."user_cooldowns" alter column "created_at" set default now();

alter table "public"."user_cooldowns" alter column "id" add generated by default as identity;

alter table "public"."users" alter column "avatar_id" drop not null;

CREATE UNIQUE INDEX user_cooldowns_user_action_key ON public.user_cooldowns USING btree (user_id, action);

alter table "public"."user_cooldowns" add constraint "user_cooldowns_user_action_key" UNIQUE using index "user_cooldowns_user_action_key";

alter table "public"."users" add constraint "users_avatar_id_fkey" FOREIGN KEY (avatar_id) REFERENCES avatars(id) not valid;

alter table "public"."users" validate constraint "users_avatar_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_available_selfies(p_uuid uuid)
 RETURNS TABLE(next_at timestamp with time zone, selfies_available integer)
 LANGUAGE plpgsql
AS $function$
DECLARE
  v_user_id BIGINT;
  v_avatar_id BIGINT;
BEGIN
  -------------------------------------------------------------------
  -- Step 1: Find the user and their current avatar
  -------------------------------------------------------------------
  SELECT u.id, u.avatar_id
  INTO v_user_id, v_avatar_id
  FROM public.users u
  WHERE u.uuid = p_uuid;

  IF v_user_id IS NULL OR v_avatar_id IS NULL THEN
    RAISE NOTICE 'User % not found or has no avatar', p_uuid;
    RETURN;
  END IF;

  -------------------------------------------------------------------
  -- Step 2: Get next_at from user_cooldowns (for action = 'selfie')
  -------------------------------------------------------------------
  SELECT uc.next_at
  INTO next_at
  FROM public.user_cooldowns uc
  WHERE uc.user_id = v_user_id
    AND uc.action = 'selfie'
  LIMIT 1;

  -------------------------------------------------------------------
  -- Step 3: Count selfies available (not yet taken by user)
  -------------------------------------------------------------------
  RETURN QUERY
  SELECT
    next_at,
    COUNT(s.id)::INT AS selfies_available
  FROM public.selfies s
  WHERE s.avatar_id = v_avatar_id
    AND s.status = 'published'
    AND s.id NOT IN (
      SELECT us.selfie_id
      FROM public.user_selfies us
      WHERE us.user_id = v_user_id
    );

END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_selfie_for_user_avatar(p_uuid uuid)
 RETURNS TABLE(avatar_id bigint, asset text)
 LANGUAGE plpgsql
AS $function$
DECLARE
  v_user_id BIGINT;
  v_avatar_id BIGINT;
  v_selfie_id BIGINT;
  v_last_selfie_created_at TIMESTAMPTZ;
BEGIN
  -------------------------------------------------------------------
  -- Step 1: Find user id and current avatar id from users table
  -------------------------------------------------------------------
  SELECT u.id, u.avatar_id
  INTO v_user_id, v_avatar_id
  FROM public.users u
  WHERE u.uuid = p_uuid;

  -- If user not found or has no current avatar, return nothing
  IF v_user_id IS NULL OR v_avatar_id IS NULL THEN
    RAISE NOTICE 'User with uuid % not found or missing avatar', p_uuid;
    RETURN;
  END IF;

  -------------------------------------------------------------------
  -- Step 2: Determine the next selfie to assign
  -- Find the latest selfie (by created_at) already linked to this user
  -------------------------------------------------------------------
  SELECT MAX(s.created_at)
  INTO v_last_selfie_created_at
  FROM public.user_selfies us
  INNER JOIN public.selfies s ON s.id = us.selfie_id
  WHERE us.user_id = v_user_id
    AND s.avatar_id = v_avatar_id;

  -------------------------------------------------------------------
  -- Step 3: Select the next selfie published after the latest one linked
  -------------------------------------------------------------------
  SELECT s.id
  INTO v_selfie_id
  FROM public.selfies s
  WHERE s.avatar_id = v_avatar_id
    AND s.status = 'published'
    AND (
      v_last_selfie_created_at IS NULL
      OR s.created_at > v_last_selfie_created_at
    )
  ORDER BY s.created_at ASC
  LIMIT 1;

  -- If no selfie found, return nothing
  IF v_selfie_id IS NULL THEN
    RAISE NOTICE 'No new selfie found for avatar id % (last linked at %)', v_avatar_id, v_last_selfie_created_at;
    RETURN;
  END IF;

  -------------------------------------------------------------------
  -- Step 4: Link user and selfie in user_selfies table
  -------------------------------------------------------------------
  INSERT INTO public.user_selfies (user_id, selfie_id)
  VALUES (v_user_id, v_selfie_id)
  ON CONFLICT DO NOTHING;

  -------------------------------------------------------------------
  -- Step 5: Upsert cooldown record for the user
  -------------------------------------------------------------------
  INSERT INTO public.user_cooldowns (user_id, action, next_at, updated_at)
  VALUES (
    v_user_id,
    'selfie',
    NOW() + INTERVAL '24 hours',
    NOW()
  )
  ON CONFLICT (user_id, action)
  DO UPDATE
  SET next_at = EXCLUDED.next_at,
      updated_at = EXCLUDED.updated_at;

  -------------------------------------------------------------------
  -- Step 6: Return selfie data (avatar_id and asset)
  -------------------------------------------------------------------
  RETURN QUERY
  SELECT s.avatar_id, s.asset
  FROM public.selfies s
  WHERE s.id = v_selfie_id;

END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_avatar_by_uuid(user_uuid uuid)
 RETURNS TABLE(avatar_id bigint, asset_riding text, asset_instagram text, character_story text, first_name text, last_name text, selfies json)
 LANGUAGE plpgsql
 SET search_path TO ''
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        a.id AS avatar_id,
        a.asset_riding,
        a.asset_instagram,
        a.character_story,
        a.first_name,
        a.last_name,
        COALESCE(
            json_agg(
                json_build_object(
                    'id', s.id,
                    'asset', s.asset,
                    'created_at', s.created_at
                )
                ORDER BY s.created_at DESC
            ) FILTER (
                WHERE s.id IS NOT NULL
                  AND s.status = 'published'
                  AND s.avatar_id = u.avatar_id
            ),
            '[]'::json
        ) AS selfies
    FROM public.users AS u
    INNER JOIN public.avatars AS a
        ON u.avatar_id = a.id
    LEFT JOIN public.user_selfies AS us
        ON us.user_id = u.id
    LEFT JOIN public.selfies AS s
        ON s.id = us.selfie_id
    WHERE u.uuid = user_uuid
    GROUP BY
        u.id,
        a.id,
        a.asset_riding,
        a.asset_instagram,
        a.character_story,
        a.first_name,
        a.last_name;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.remove_avatar_by_user(p_uuid uuid)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  v_user_id BIGINT;
BEGIN
  -------------------------------------------------------------------
  -- Step 1: Find user id from uuid
  -------------------------------------------------------------------
  SELECT u.id INTO v_user_id
  FROM users u
  WHERE u.uuid = p_uuid;

  -- If user doesn't exist, just exit quietly
  IF v_user_id IS NULL THEN
    RAISE NOTICE 'User with uuid % not found', p_uuid;
    RETURN;
  END IF;

  -------------------------------------------------------------------
  -- Step 2: Clear current avatar from users table
  -------------------------------------------------------------------
  UPDATE users
  SET avatar_id = NULL
  WHERE uuid = p_uuid;

  -------------------------------------------------------------------
  -- Step 3: Update user_avatars — mark previous current avatar as removed
  -------------------------------------------------------------------
  UPDATE user_avatars
  SET
    is_current = FALSE,
    removed_at = NOW()
  WHERE user_id = v_user_id
    AND is_current = TRUE;

  -------------------------------------------------------------------
  -- Step 4: Reset user_cooldowns — clear next_at for this user
  -------------------------------------------------------------------
  UPDATE user_cooldowns
  SET next_at = NULL
  WHERE user_id = v_user_id
    AND action = 'selfie';

END;
$function$
;


